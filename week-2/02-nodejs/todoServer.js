/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  let todoItems = [];
  let id = 0;

  app.get('/todos',(req,res)=>{
    res.status(200).json(todoItems)
  })
  
  app.get('/todo/:id',(req,res)=>{
    let reqId = req.params.id;
    for (let i=0; i<todoItems.length; i++){
      if( todoItems[i].id === reqId){
        res.status(200).send(todoItems[i]);
      }
    }
    res.status(400).send('Id not found');
  })

  app.post('/todos',(req,res)=>{
    let title = req.body.title;
    let completed = req.body.completed;
    let description = req.body.description;
    if (id == 0){id = 1}
    else {
      let lastId = todoItems[todoItems.length - 1].id;
      id = lastId + 1;
    }

    todoItems.push({
      "id" : id,
      'title' : title,
      'completed' : completed,
      'description' : description
    })
    res.status(201).send({'id':id})
  })

  app.put('/todo/:ids',(req,res)=>{
    let reqId = req.params.ids;
    let title = req.body.tile;
    let status = req.body.status;
    for (let i=0; i < todoItems.length; i++){
      if(todoItems[i].id == reqId){
        todoItems[i].title = title;
        todoItems[i].completed = status;
        res.status(200).send("Item was found and updated");
      }
    }
    res.status(404).send("Item was not found")
  })

  app.delete('/todo/:id',(req,res)=>{
    let id = req.params.id;
    lengthBeforeFilter = todoItems.length;
    todoItems = todoItems.filter(function(objects){objects.id !== id})
    lengthAfterFilter = todoItems.length;
    if(lengthBeforeFilter == lengthAfterFilter){
      res.status(400).send("Id not found")
    }
    else{
      res.status(200).send(id," deleted");
    }

  })

  module.exports = app;